// @flow

import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    ScrollView,
    TextInput,
    Alert,
    TouchableWithoutFeedback,
    TouchableOpacity
} from 'react-native';
import { List, InputItem, TextareaItem, DatePicker, Picker, ImagePicker, Button, WhiteSpace, Flex } from 'antd-mobile-rn';
import * as MineAction from 'root/src/actions/control';
import Icon from 'react-native-vector-icons/FontAwesome';
import { bold } from 'ansi-colors';
import moment from 'moment';
import DetailItem from 'root/src/screens/baseComon/DetailItem';
import lodash from 'lodash';
const { connect } = require('remx');
const Item = List.Item;
let initData = {
    plantName: '',
    area: '',
    period: '',
    year: new Date(),
    outPut: '',
    iscurrent: true,
    unit: "亩"
}
let initError = {
    plantName: false,
    area: false,
    period: false,
}
let model = null
let breedName = null
@navigatorDecorator
class ControlAdd extends Component {
    constructor(props) {
        super(props);
        this.loading = false
        this.state = {
            cropList: [],  //作物
            cropState: '',
            controlList: [], //技术
            controlState: [''],
            startTime: new Date(),
            items: [
                {
                    controlCategoryCode: '',
                    controlCategoryName: '',
                    parentCategoryCode: '',
                    str: '',
                    typeList: [],
                    children: [
                        {
                            area: '',
                            str: '',
                            controlCategoryCode: '',
                            controlCategoryName: '',
                            parentCategoryCode: '',
                        }
                    ]
                }
            ],
        }
        Navigation.mergeOptions(this.props.componentId, {
            topBar: {
                title: {
                    text: this.props.cropName ? '编辑绿色防治' : '新增绿色防治'
                },
                rightButtons: [
                    confirmRightBtn
                ]
            }
        });
        Navigation.events().bindComponent(this);
    }
    navigationButtonPressed() {
        if (this.loading) {
            return false
        }
        let nowName = false
        const ret = /^(([1-9][0-9]*)|(([0]\.\d{1,2}|[1-9][0-9]*\.\d{1,2})))$/;
        if (!this.state.cropState[0]) {
            nowName = true
            MyToast.info('请选择作物');
        }
        this.state.items.forEach((i) => {
            if (!i.str) {
                nowName = true
                MyToast.info('请选择防控技术');
            }
            i.children.forEach((o)=>{
                if (!o.str) {
                    nowName = true
                    MyToast.info('请选择防控类型');
                }else if(!o.area){
                    nowName = true
                    MyToast.info('请填写防控面积');
                }else if (!ret.test(o.area)) {
                    nowName = true
                    MyToast.info('防控面积应大于0，且最多两位小数的数字');
                }
            }) 
        })
        if (nowName) {
            return false
        } else {
            this.loading = true
            let startTime = moment(this.state.startTime);
            let postData = {
                cropName: this.state.cropState[0],
                items: this.state.items,
                year: startTime.year(),
                month: startTime.month() + 1,
            }
            if (this.props.cropName) {
                postData.id = this.props.cropName
                MineAction.ControlEditor({ input: postData }).then((data) => {
                    if (data.suc == 1) {
                        MyToast.success('编辑成功');
                        setTimeout(() => {
                            this.pop();
                            this.props.refresh && this.props.refresh()
                            this.pushPage({
                                component: {
                                    ...Global.Screens.ControlList,
                                }
                            });
                        }, 2000)
                    } else {
                        this.loading = false
                        MyToast.info(data.msg)
                    }
                })
            } else {
                MineAction.ControlAdd({ input: postData }).then((data) => {
                    if (data.suc == 1) {
                        MyToast.success('新增成功');
                        setTimeout(() => {
                            this.pop();
                            this.props.refresh && this.props.refresh()
                            this.pushPage({
                                component: {
                                    ...Global.Screens.ControlList,
                                }
                            });
                        }, 2000)
                    } else {
                        this.loading = false
                        MyToast.info(data.msg)
                    }
                })
            }
        }
    }
    componentWillMount() {
        //获取所有作物
        MineAction.GetPlantList().then((data) => {
            if (data.suc) {
                if (data.data.length < 1) {
                    return false
                }
                let model = data.data
                let arrInt = []
                model.forEach((i, index) => {
                    arrInt[index] = {}
                    arrInt[index].value = i.plantName
                    arrInt[index].label = i.plantName
                });
                this.setState({
                    cropList: arrInt,
                })
            } else {
                MyToast.info('作物获取失败，稍后尝试');
            }
        })
        //获取技术
        this.GetAgriPreventionControlClass({}, 'all')
        if (this.props.cropName) {
            MineAction.ControlDetail({
                input:{
                    cropName: this.props.cropName,
                    year: this.props.year,
                }
            }).then((data) => {
                if (data.suc) {
                    let model = data.data
                    model.items.forEach((i, ind) => {
                        this.GetAgriPreventionControlClass({ parentCode: i.controlCategoryCode }, ind) //获取新的类型
                        i.str = [i.controlCategoryCode + '*' + i.controlCategoryName + '*' + i.parentCategoryCode]
                        i.children.forEach( (o,index) => {
                            o.str = [o.controlCategoryCode + '*' + o.controlCategoryName + '*' + o.parentCategoryCode]
                        } )
                    })
                    this.setState({
                        cropState: [model.cropName],
                        startTime: new Date(model.year+'-'+model.month),
                        items: model.items
                    })
                } else {
                    MyToast.info('数据获取失败，稍后尝试');
                }
            })
        }
    }
    GetAgriPreventionControlClass(postData, code) {
        
        //获取类型
        MineAction.GetAgriPreventionControlClass({ input: postData }).then((data) => {
            if (data.suc) {
                if (data.data.length < 1) {
                    return false
                }
                let model = data.data
                let arrInt = []
                model.forEach((i, index) => {
                    arrInt[index] = {}
                    arrInt[index].label = i.name
                    arrInt[index].value = i.code + "*" + i.name + '*' + (i.parentCode?i.parentCode:'null')
                });
                if (code == 'all') {
                    this.setState({
                        controlList: arrInt,
                    })
                } else {
                    let dataList = lodash.cloneDeep(this.state.items)
                    dataList[code].typeList = arrInt
                    this.setState({
                        items: dataList,
                    })
                }

            } else {
                MyToast.info('防控类型获取失败，稍后尝试');
            }
        })
    }
    changeData(name, index, data, childrenIndex) {
        let dataList = lodash.cloneDeep(this.state.items)
        if (name == 'controlState') {
            let str = data[0]
            dataList[index]['typeList'] = [] //请空当前防治类型
            dataList[index]['str'] = data
            this.GetAgriPreventionControlClass({ parentCode: str.split('*')[0] }, index) //获取新的类型
            //分解ID 赋值
            dataList[index]['controlCategoryCode'] = str.split('*')[0]
            dataList[index]['controlCategoryName'] = str.split('*')[1]
            dataList[index]['parentCategoryCode'] = str.split('*')[2]
            dataList[index].children = [   //清空下面类型的数据
                {
                    area: '',
                    str: '',
                    controlCategoryCode: '',
                    controlCategoryName: '',
                    parentCategoryCode: '',
                }
            ]
        }
        if (name == 'typeState') {
            let str = data[0]
            dataList[index].children[childrenIndex]['str'] = data
            //分解ID 赋值
            dataList[index].children[childrenIndex]['controlCategoryCode'] = str.split('*')[0]
            dataList[index].children[childrenIndex]['controlCategoryName'] = str.split('*')[1]
            dataList[index].children[childrenIndex]['parentCategoryCode'] = str.split('*')[2]
        }
        if (name == 'area') {
            dataList[index].children[childrenIndex]['area'] = data
        }
        this.setState({
            items: dataList
        })
    }
    render() {
        return (
            <ScrollView style={{ backgroundColor: '#f5f5f5' }}>
                <List>
                    <Picker
                        registerNumber="作物"
                        data={this.state.cropList}
                        cols={1}
                        value={this.state.cropState}
                        onOk={(val) => {
                            this.setState({
                                cropState: val
                            })
                        }}
                        style={{ color: '#000' }}
                    >
                        <Item><Text style={{ fontSize: 17, color: '#000' }}>作物</Text></Item>
                    </Picker>
                </List>
                <List>
                    <DatePicker
                        value={this.state.startTime ? new Date(this.state.startTime) : null}
                        mode="month"
                        minDate={new Date('2018-01')}
                        maxDate={new Date()}
                        onChange={text => this.setState({ startTime: text } )}
                        format={ val =>  moment().format('YYYY-MM') }
                    >
                        <Item arrow="horizontal" ><Text style={{ color: 'gray' }}>填写时间</Text></Item>
                    </DatePicker>
                </List>
                <View>
                    {
                        this.state.items.map((i, ind) => {
                            return (
                                <View key={ind}>
                                    <List>
                                        <View style={{ justifyContent: 'space-between', flexDirection: 'row' }}>
                                            <Text style={{ lineHeight: 50, fontSize: 18, marginLeft: 15, color: '#00BFFF', fontWeight: 'bold' }}>绿色防控（{ind + 1}）</Text>
                                            {this.state.items.length == 1 || this.props.cropName ? (null) : (
                                                <TouchableWithoutFeedback onPress={() => {
                                                    let nowList = lodash.cloneDeep(this.state.items)
                                                    nowList.splice(ind, 1)
                                                    this.setState({
                                                        items: nowList
                                                    })
                                                }}>
                                                    <View>
                                                        <Text style={{ textAlign: 'center', fontSize: 18, color: '#000', lineHeight: 50, marginRight: 15 }}><Icon color='red' name='trash' size={18} /></Text>
                                                    </View>
                                                </TouchableWithoutFeedback>
                                            )}
                                        </View>
                                    </List>
                                    <List>
                                        <Picker
                                            registerNumber="防控技术"
                                            data={this.state.controlList}
                                            cols={1}
                                            value={this.state.items[ind]['str']}
                                            onOk={(val) => {
                                                this.changeData('controlState', ind, val)
                                            }}
                                            style={{ color: '#000' }}
                                        >
                                            <Item><Text style={{ fontSize: 17, color: '#000' }}>防控技术</Text></Item>
                                        </Picker>
                                    </List>
                                    {
                                        i.children.map((o, index) => {
                                            return (
                                                <View key={index}>
                                                    <List>
                                                        <View style={{ justifyContent: 'space-between', flexDirection: 'row' }}>
                                                            <Text style={{ lineHeight: 30, fontSize: 16, marginLeft: 15, color: 'green', fontWeight: 'bold' }}>防控类型（{index + 1}）</Text>
                                                            {this.state.items[ind].children.length == 1 || this.props.cropName ? (null) : (
                                                                <TouchableWithoutFeedback onPress={() => {
                                                                    let nowList = lodash.cloneDeep(this.state.items)
                                                                    nowList[ind].children.splice(ind, 1)
                                                                    this.setState({
                                                                        items: nowList
                                                                    })
                                                                }}>
                                                                    <View>
                                                                        <Text style={{ textAlign: 'center', fontSize: 18, color: '#000', lineHeight: 50, marginRight: 15 }}><Icon color='red' name='trash' size={18} /></Text>
                                                                    </View>
                                                                </TouchableWithoutFeedback>
                                                            )}
                                                        </View>
                                                    </List>
                                                    <List>
                                                        <Picker
                                                            registerNumber="防控类型"
                                                            data={this.state.items[ind].typeList}
                                                            cols={1}
                                                            value={this.state.items[ind].children[index].str}
                                                            onOk={(val) => {
                                                                this.changeData('typeState', ind, val, index)
                                                            }}
                                                            style={{ color: '#000' }}
                                                        >
                                                            <Item><Text style={{ fontSize: 17, color: '#000' }}>防控类型</Text></Item>
                                                        </Picker>
                                                    </List>
                                                    <List>
                                                        <InputItem
                                                            labelNumber={12}
                                                            textAlign="right"
                                                            // clear
                                                            onChangeText={(text) => {
                                                                this.changeData('area', ind, text, index)
                                                            }}
                                                            extra={'亩'}
                                                            maxLength={50}
                                                            placeholder="防控面积"
                                                            value={this.state.items[ind].children[index].area + ''}
                                                            type='number'
                                                        >防控面积
                                                        </InputItem>
                                                    </List>
                                                    
                                                </View>
                                            )
                                        })
                                    }
                                    {/* 添加一个类型 */}
                                    <TouchableWithoutFeedback onPress={() => {
                                        let nowList = lodash.cloneDeep(this.state.items)
                                        nowList[ind].children.push(
                                            {
                                                area: '',
                                                controlCategoryCode: '',
                                                controlCategoryName: '',
                                                parentCategoryCode: ''
                                            }
                                        )
                                        this.setState({
                                            items: nowList,
                                        })
                                    }}>
                                        <View>
                                            <Text style={{ textAlign: 'center', fontSize: 18, color: 'green', lineHeight: 50 }}><Icon name='plus-circle' size={18} />添加类型</Text>
                                        </View>
                                    </TouchableWithoutFeedback>
                                </View>
                            )
                        })
                    }
                    {/* 点击添加一个技术 */}
                    <TouchableWithoutFeedback onPress={() => {
                        let nowList = lodash.cloneDeep(this.state.items)
                        nowList.push(
                            {
                                controlCategoryCode: '',
                                controlCategoryName: '',
                                parentCategoryCode: '',
                                children: [
                                    {
                                        area: '',
                                        controlCategoryCode: '',
                                        controlCategoryName: '',
                                        parentCategoryCode: ''
                                    }
                                ]
                            }
                        )
                        this.setState({
                            items: nowList,
                        })
                    }}>
                        <View>
                            <Text style={{ textAlign: 'center', fontSize: 18, color: '#00BFFF', lineHeight: 50 }}><Icon name='plus-circle' size={18} />添加防控技术</Text>
                        </View>
                    </TouchableWithoutFeedback>
                </View>
            </ScrollView >
        );
    }
}
function mapStateToProps() {
    return {

    };
}

module.exports = connect(mapStateToProps)(ControlAdd);
const styles = StyleSheet.create({
    // userInfo: store.getAccount()
});
