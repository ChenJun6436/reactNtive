// @flow

import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    ScrollView,
    TextInput,
    Alert,
    TouchableWithoutFeedback
} from 'react-native';
import { List, InputItem, TextareaItem, DatePicker, Picker, ImagePicker, Button, WhiteSpace } from 'antd-mobile-rn';
import * as MineAction from 'root/src/actions/testRecord';
import * as GardenAction from 'root/src/actions/garden';
import * as CommonAction from 'root/src/actions/common';
import Icon from 'react-native-vector-icons/FontAwesome';
import { bold } from 'ansi-colors';
import moment from 'moment';
const { connect } = require('remx');
const Item = List.Item;

@navigatorDecorator
class TestRecordAdd extends Component {
    constructor(props) {
        super(props);
        this.loading = false
        this.state = {
            examinDay: new Date(),
            typeList: [
                {
                    label: '自检',
                    value: '1',
                },
                {
                    label: '委托检测',
                    value: '2',
                },
                {
                    label: '监管抽查',
                    value: '3',
                },
            ],
            examinType: ['1'],
            examiningList: [
                {
                    label: '合格',
                    value: '1',
                },
                {
                    label: '不合格',
                    value: '2',
                }
            ],
            examining: ['1'],
            files: [],
            avatar: '',
            examinUnitId: [],
            examinUnitList: [],
            allBreedList: [],
        }
        Navigation.mergeOptions(this.props.componentId, {
            topBar: {
                title: {
                    text: this.props.id ? '编辑检测' : '新增检测'
                },
                rightButtons: [
                    confirmRightBtn
                ]
            }
        });
        Navigation.events().bindComponent(this);
    }
    navigationButtonPressed() {
        if (this.loading) {
            return
        }
        if (!this.state.allBreedListState) {
            MyToast.info('请选择产品品种');
            return
        }
        if (!this.state.traceCode) {
            MyToast.info('请选择批次');
            return
        }
        // if (!this.state.examinStandard) {
        //     MyToast.info('请填写检测标准');
        //     return
        // }
        // if (this.state.fileslength <= 0) {
        //     MyToast.info('请上传检测文件');
        //     return
        // }
        let input = {}
        input.examinProduct = [
            {
                //    cropName: 'cropName',
                cropId: this.state.allBreedListState[0],
                breedId: this.state.allBreedListState[1],
                //    breedName: this.state.breedName,
                traceCode: this.state.traceCode[0],

            }
        ]
        input.examinFile = this.state.files
        input.examinDay = this.state.examinDay
        input.examinType = this.state.examinType[0]
        input.examining = this.state.examining[0]
        input.examinStandard = this.state.examinStandard
        input.examinUnitId = this.state.examinUnitId[0]
        input.id = this.props.id ? this.props.id : null
        this.loading = true
        if (this.props.id) {
            input.examinProduct[0].id = this.state.model.examinProduct[0].id
            MineAction.EditUse({ input }).then((data) => {
                if (data.suc) {
                    MyToast.success('编辑成功');
                    setTimeout(() => {
                        this.pop();
                        this.props.refresh && this.props.refresh()
                    }, 2000)
                } else {
                    this.loading = false
                    MyToast.info(data.msg)
                }
            })
        } else {
            MineAction.AddUse({ input }).then((data) => {
                if (data.suc) {
                    MyToast.success('新增成功');
                    setTimeout(() => {
                        this.pop();
                        this.props.refresh && this.props.refresh()
                    }, 2000)
                } else {
                    this.loading = false
                    MyToast.info(data.msg)
                }
            })
        }
    }
    componentWillMount() {
        //作物
        //获取产品
        let input = {
            plantBaseId: '',
            plantBaseLandId: '',
        }
        GardenAction.GetAllCrop({ input }).then((data) => {
            if (data.suc) {
                this.setState({
                    allBreedList: data.data,
                })
            } else {
                MyToast.info('数据获取失败，稍后尝试');
            }
        })
        //获取检测机构
        MineAction.GetUnitList().then((data) => {
            if (data.suc) {
                let model = data.data
                let arrInt = []
                model.forEach((i, index) => {
                    arrInt[index] = {}
                    arrInt[index].label = i.name
                    arrInt[index].value = i.id
                });
                this.setState({
                    examinUnitList: arrInt,
                })
            } else {
                MyToast.info('基地获取失败，稍后尝试');
            }
        })
        //编辑页面
        if (this.props.id) {
            MineAction.GetUse(this.props.id).then((data) => {
                if (data.suc) {
                    this.setState({
                        model: data.data,
                        loading: false,
                        examinDay: new Date(data.data.examinDay),
                        files: data.data.examinFile,
                        allBreedListState: [data.data.examinProduct[0].cropId, data.data.examinProduct[0].breedId],
                        traceCode: [data.data.examinProduct[0].traceCode],
                        examinType: [data.data.examinType + ''],
                        examinUnitId: [data.data.examinUnitId + ''],
                        examinStandard: data.data.examinStandard + '',
                        examining: [data.data.examining + ''],
                    }, () => {
                        this.gettraceCodeList(data.data.examinProduct[0].breedId)
                    })
                } else {
                    MyToast.info('数据获取失败，稍后尝试');
                }
            })
        }
    }
    //批次
    gettraceCodeList = (id) => {
        MineAction.gettraceCodeList(id).then((data) => {
            if (data.suc) {
                let traceCodeList = data.data
                for (let item of traceCodeList) {
                    item.value = item.traceCode
                    item.label = item.traceCode
                }
                this.setState({
                    traceCodeList
                })
            } else {
                MyToast.info('数据获取失败，稍后尝试');
            }
        })
    }
    handleFile2Change = (files, type, index) => {
        if (type == 'add') {
            var formData = new FormData();
            let file = {
                uri: files[files.length - 1].url,
                type: 'application/octet-stream',
                name: 'image.jpg'
            };
            formData.append('avatar', file);
            CommonAction.UploadImg({
                input: {
                    formData,
                    type: 4
                }
            }).then((suc) => {
                if (suc.suc) {
                    this.setState({
                        avatar: suc.Data.url,
                    })
                    let item = this.state.files
                    item.push({
                        url: ImgUrl + suc.Data.url,
                        id: suc.Data.url,
                    })
                    this.setState({
                        files: item,
                    });
                } else {
                    MyToast.info('上传头像失败')
                }
            })
        } else if (type == 'remove') {
            let item = this.state.files
            item.splice(index, 1)
            this.setState({
                files: item,
            })
        }
    }
    onErrorClick = () => {
        MyToast.info('请填写正确的信息，且不能为空');
    }
    render() {
        return (
            <ScrollView style={{ backgroundColor: '#f5f5f5' }}>
                <View>
                    <List>
                        <DatePicker
                            value={this.state.examinDay}
                            mode="date"
                            minDate={new Date('2018-01-01')}
                            onChange={(text) => {
                                this.setState({
                                    examinDay: text
                                })
                            }}
                            format="YYYY-MM-DD"
                        >
                            <Item arrow="horizontal" >送检日期</Item>
                        </DatePicker>
                    </List>
                    <List>
                        <Picker
                            registerNumber="产品品种"
                            data={this.state.allBreedList}
                            cols={2}
                            value={this.state.allBreedListState}
                            onOk={
                                (val, option) => {
                                    this.setState({ allBreedListState: val })
                                    this.gettraceCodeList(val[1])
                                }
                            }
                            style={{ color: '#000' }}
                        >
                            <Item><Text style={{ fontSize: 17, color: '#000' }}>产品品种</Text></Item>
                        </Picker>
                        {this.state.allBreedListState ?
                            <Picker
                                registerNumber="产品批次"
                                data={this.state.traceCodeList}
                                cols={1}
                                value={this.state.traceCode}
                                onOk={
                                    (val, option) => {
                                        this.setState({ traceCode: val })
                                    }
                                }
                                style={{ color: '#000' }}
                            >
                                <Item><Text style={{ fontSize: 17, color: '#000' }}>产品批次</Text></Item>
                            </Picker>
                            : null}
                    </List>
                    <List>
                        <Picker
                            registerNumber="作物"
                            data={this.state.typeList}
                            cols={1}
                            value={this.state.examinType}
                            onOk={(val) => this.setState({ examinType: val })}
                            style={{ color: '#000' }}
                        >
                            <Item><Text style={{ fontSize: 17, color: '#000' }}>检测方式</Text></Item>
                        </Picker>
                    </List>
                    <List>
                        <Picker
                            registerNumber="检测机构"
                            data={this.state.examinUnitList}
                            cols={1}
                            value={this.state.examinUnitId}
                            onOk={(val) => this.setState({ examinUnitId: val })}
                            style={{ color: '#000' }}
                        >
                            <Item><Text style={{ fontSize: 17, color: '#000' }}>检测机构</Text></Item>
                        </Picker>
                    </List>
                    {/* <List>
                        <InputItem
                            textAlign="right"
                            clear
                            onChangeText={(text) => {
                                this.setState({
                                    examinStandard: text
                                }, () => {
                                    if (!this.state.examinStandard) {
                                        this.setState({
                                            examinStandardError: true
                                        })
                                    } else {
                                        this.setState({
                                            examinStandardError: false
                                        })
                                    }
                                })
                            }}
                            error={this.state.examinStandardError}
                            onErrorClick={this.onErrorClick}
                            maxLength={50}
                            placeholder="检测标准"
                            value={this.state.examinStandard }
                        >检测标准
                        </InputItem>
                    </List> */}
                    <List>
                        <Picker
                            data={this.state.examiningList}
                            cols={1}
                            value={this.state.examining}
                            onOk={(val) => this.setState({ examining: val })}
                            style={{ color: '#000' }}
                        >
                            <Item><Text style={{ fontSize: 17, color: '#000' }}>检测结果</Text></Item>
                        </Picker>
                    </List>
                    <List>
                        <Item>
                            <Text style={{ fontSize: 17, color: '#000' }}>检测文件上传</Text>
                        </Item>
                        <View style={{ alignItems: 'center', padding: 15 }}>
                            <ImagePicker
                                selectable={this.state.files.length < 3}
                                accept="image/gif,image/jpeg,image/jpg,image/png"
                                onChange={this.handleFile2Change}
                                files={this.state.files}
                            />
                        </View>
                    </List>

                </View>
            </ScrollView>
        );
    }
}
function mapStateToProps() {
    return {

    };
}

module.exports = connect(mapStateToProps)(TestRecordAdd);
const styles = StyleSheet.create({
    // userInfo: store.getAccount()
});
