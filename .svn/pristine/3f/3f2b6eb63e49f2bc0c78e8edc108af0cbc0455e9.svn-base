// @flow

import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    ScrollView,
    TextInput,
    Alert,
    TouchableWithoutFeedback
} from 'react-native';
import { List, InputItem, TextareaItem, DatePicker, Picker, ImagePicker, Button,WhiteSpace } from 'antd-mobile-rn';
import * as MineAction from 'root/src/actions/mine';
import Icon from 'react-native-vector-icons/Feather';
import { bold } from 'ansi-colors';
import moment from 'moment';
const { connect } = require('remx');
const Item = List.Item;
const initData = {
    plantName : '',
    area : '',
    period: '',
    year: new Date(),
    outPut: '',
    iscurrent: true,
    unit: "亩"
}
const initError = {
    plantName : false,
    area : false,
    period: false,
}
@navigatorDecorator
class MinePlant extends Component {
    constructor(props) {
        super(props);
        this.state = {
            plantList: [initData],
            plantError: [initError],
        }
        Navigation.mergeOptions(this.props.componentId, {
            topBar: {
                rightButtons: [
                    confirmRightBtn
                ]
            }
        });
        Navigation.events().bindComponent(this);
    }
    navigationButtonPressed() {
        let nowName = ''
        let nowError = this.state.plantError
        this.state.plantList.map((i,index)=>{
            if(!i.plantName){
                nowName = 'plantName'
                nowError[index][nowName] = true
            }
            if(!i.area){
                nowName = 'area'
                nowError[index][nowName] = true
            }
            if(!i.period){
                nowName = 'period'
                nowError[index][nowName] = true
            }
        })
        if(nowName){
            Toast.info('请填写作物信息', 3);
            this.setState({
                plantError: nowError
            })
        }else{
            let plantList = this.state.plantList
            plantList.forEach(i => {
                i.year = moment(i.year).format('YYYY-MM-DD');
            });
            MineAction.AddPlant({input:this.state.plantList}).then((data)=>{
                if (data.suc) {
                    Toast.info('保存成功', 3);
                }else{
                    Toast.info('保存失败，请稍后再试', 3);
                }
            })
        }
    }
    componentWillMount() {
        const vm = this
        let nowError = this.state.plantError
        MineAction.GetPlantList('true').then((data)=>{
            if (data.data.length > 0) {
                let nowList = data.data
                nowList.forEach((i,index)=>{
                    if(i.year){
                        i.year = new Date(i.year)
                    }
                    if(index>0){
                        nowError.push(
                            {
                                plantName : false,
                                area : false,
                                period: false,
                            }
                        )
                    }
                })
                vm.setState({
                    plantList: nowList,
                    plantError: nowError
                })
            }
        })
    }
    changeData(text,index,name) {
        let nowList = this.state.plantList
        let nowError = this.state.plantError
        let textNew = text
        nowList[index][name] = textNew
        if(!text){
            nowError[index][name] = true
            switch(name){
                case 'plantName':
                    Toast.info('作物名称不能为空', 3);
                    break;
                case 'area':
                    Toast.info('面积不能为空', 3);
                    break;
                case 'period':
                    Toast.info('生长周期不能为空', 3);
                    break;
            }
            this.setState({ 
                plantError: nowError,
            })
        }else{
            nowError[index][name] = false
            this.setState({ 
                plantList: nowList,
                plantError: nowError,
            })
        }
    }

    onErrorClick = () => {
        Toast.info('请填写正确的信息，且不能为空');
    }
    render() {
        console.log(this.state.plantError)
        console.log(this.state.plantList)
        return (
            <ScrollView style={{ backgroundColor: '#f5f5f5' }}>
                {
                    this.state.plantList.map((i,index)=>{
                        return(
                            <View key={index}>
                                <List>
                                    <View style={{justifyContent:'space-between',flexDirection:'row'}}>
                                        <Text style={{lineHeight:50,fontSize:18,marginLeft:15,color:'#000',fontWeight:'bold'}}>土地（{ index + 1 }）</Text>
                                        {/* 删除土地 */}
                                        {index == 0?(null):(
                                            <TouchableWithoutFeedback onPress={(index)=>{
                                                let nowList = this.state.plantList
                                                nowList.splice(index,1)
                                                this.setState({
                                                    plantList: nowList
                                                })
                                            }}>
                                                <View>
                                                    <Text style={{textAlign:'center',fontSize:18,color:'#000',lineHeight:50,marginRight: 15}}><Icon color='red' name='trash-2' size={18}/></Text>
                                                </View>
                                            </TouchableWithoutFeedback>  
                                        )}
                                    </View>
                                </List>
                                <List>
                                    <InputItem
                                        labelNumber={7}
                                        textAlign="right"
                                        clear
                                        onChangeText={(text) =>{
                                            this.changeData(text,index,'plantName')
                                        }}
                                        error={this.state.plantError[index]['plantName']}
                                        onErrorClick={this.onErrorClick}
                                        maxLength={20}
                                        placeholder="输入名称"
                                        value={i.plantName}
                                    >种植（养）作物
                                    </InputItem>
                                </List>
                                <List>
                                    <InputItem
                                        textAlign="right"
                                        clear
                                        onChangeText={(text) =>{
                                            this.changeData(text,index,'area')
                                        }}
                                        error={this.state.plantError[index]['area']}
                                        onErrorClick={this.onErrorClick}
                                        maxLength={20}
                                        placeholder="输入面积"
                                        value={i.area+''}
                                        extra="亩"
                                    >面积
                                    </InputItem>
                                </List>
                                <List>
                                    <DatePicker
                                        value={i.year}
                                        mode="date"
                                        minDate={new Date('2018-01-01')}
                                        onChange={(text) =>{
                                            this.changeData(text,index,'year')
                                        }}
                                        format="YYYY-MM-DD"
                                    >
                                        <Item arrow="horizontal" >种（养）日期</Item>
                                    </DatePicker>
                                </List>
                                <List>
                                    <InputItem
                                        textAlign="right"
                                        clear
                                        onChangeText={(text) =>{
                                            this.changeData(text,index,'period')
                                        }}
                                        error={this.state.plantError[index]['period']}
                                        onErrorClick={this.onErrorClick}
                                        maxLength={20}
                                        placeholder="输入生长周期"
                                        value={i.period }
                                        extra="天"
                                    >生长周期
                                    </InputItem>
                                </List>
                                <List>
                                    <InputItem
                                        textAlign="right"
                                        clear
                                        onChangeText={(text) =>{
                                            this.changeData(text,index,'outPut')
                                        }}
                                        placeholder="输入预计产量"
                                        value={i.outPut }
                                        extra="kg"
                                    >预计产量
                                    </InputItem>
                                </List>
                                <WhiteSpace size="sm" />
                            </View>
                        )
                    })
                }
                <TouchableWithoutFeedback onPress={()=>{
                    let nowList = this.state.plantList
                    nowList.push(
                        {
                            plantName : '',
                            area : '',
                            period: '',
                            year: new Date(),
                            outPut: '',
                            iscurrent: true,
                            unit: "亩"
                        }
                    )
                    let nowError = this.state.plantError
                    nowError.push(
                        {
                            plantName : false,
                            area : false,
                            period: false,
                        }
                    )
                    this.setState({
                        plantList: nowList,
                        plantError: nowError
                    })
                }}>
                    <View>
                        <Text style={{textAlign:'center',fontSize:18,color:'#000',lineHeight:50}}><Icon name='plus-circle' size={18}/>添加</Text>
                    </View>
                </TouchableWithoutFeedback>    
            </ScrollView>
        );
    }
}
function mapStateToProps() {
    return {

    };
}

module.exports = connect(mapStateToProps)(MinePlant);
const styles = StyleSheet.create({
    // userInfo: store.getAccount()
});
