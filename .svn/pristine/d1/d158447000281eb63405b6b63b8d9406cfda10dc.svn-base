// @flow

import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    ScrollView,
    TextInput,
    Alert,
    TouchableWithoutFeedback
} from 'react-native';
import { List, InputItem, TextareaItem, DatePicker, Picker, Button, WhiteSpace } from 'antd-mobile-rn';
import * as MineAction from 'root/src/actions/workRecord';
import * as GardenAction from 'root/src/actions/garden';
import Icon from 'react-native-vector-icons/FontAwesome';
import { bold } from 'ansi-colors';
import moment from 'moment';
const { connect } = require('remx');
const Item = List.Item;

@navigatorDecorator
class TestRecordAdd extends Component {
    constructor(props) {
        super(props);
        this.loading = false
        this.state = {
            workDay: new Date(),
            remark: '',
            // plantBaseId: '',
            // plantBaseLandId: '',
            // plantGardenId: '',
            // workCost: '',
            // workDays:'',
            // workContentId: '',
            cropId: '',
            breedId: '',

            baseList:[],
            landList: [],
            gardenList: [],
            workContentList: [],
            gardenCropList: [],
            // gardenCropState: [],
           
            
        }
        Navigation.mergeOptions(this.props.componentId, {
            topBar: {
                title: {
                    text: this.props.id ? '编辑用工' : '新增用工'
                },
                rightButtons: [
                    confirmRightBtn
                ]
            }
        });
        Navigation.events().bindComponent(this);
    }
    navigationButtonPressed() {
        if(this.loading){
            return false
        }
        if (!this.state.plantBaseId) {
            MyToast.info('基地不能为空')
            return false
        } else if (!this.state.plantBaseLandId) {
            MyToast.info('地块不能为空')
            return false
        } else if (!this.state.plantGardenId){
             MyToast.info('标准园不能为空')
             return false
        }else if (!this.state.gardenCropState) {
            MyToast.info('产品不能为空')
            return false
        } else if (!this.state.workContentId) {
            MyToast.info('劳作内容不能为空')
            return false
        } else if (!this.state.workDays) {
            MyToast.info('用工数量不能为空')
            return false
        } else if (!this.state.workCost) {
            MyToast.info('成本不能为空')
            return false
        }
       let input = {
           workDay: moment(this.state.workDay).format('YYYY-MM-DD'),
           plantBaseId: this.state.plantBaseId[0],
           plantBaseLandId: this.state.plantBaseLandId[0],
           plantGardenId: this.state.plantGardenId[0],
           cropId: this.state.gardenCropState[0],
           breedId: this.state.gardenCropState[1],
           workContentId: this.state.workContentId[0],
           workDays: this.state.workDays,
           workCost: this.state.workCost,
           remark: this.state.remark,
           id: this.props.id ? this.props.id : null
       }
       console.log(JSON.stringify(input))
       this.loading = true
       if(this.props.id){
            MineAction.EditUse({input}).then((data) => {
                console.log('edit', data)
                if (data.suc) {
                    MyToast.success('编辑成功');
                    // initData = {
                    //     investmentType: '',
                    //     registerNumber: '',
                    //     registerName: '',
                    //     expirationDay: new Date(),
                    //     investmentName: '',
                    //     packUnit: true,
                    //     quantity: "亩",
                    //     manufacturer: '',
                    //     saleUnity: '',
                    //     remark: '',
                    // }
                    setTimeout(() => {
                        this.pop();
                        this.props.refresh && this.props.refresh()
                    }, 2000)
                } else {
                    this.loading = false
                    MyToast.info('修改失败，请稍后尝试');
                }
            })
       }else{
           MineAction.AddUse({input}).then((data)=>{
               console.log('add',data)
                if (data.suc) {
                    MyToast.success('新增成功');
                    // initData = {
                    //     investmentType: '',
                    //     registerNumber: '',
                    //     registerName: '',
                    //     expirationDay: new Date(),
                    //     investmentName: '',
                    //     packUnit: true,
                    //     quantity: "亩",
                    //     manufacturer: '',
                    //     saleUnity: '',
                    //     remark: '',
                    // }
                    setTimeout(() => {
                        this.pop();
                        this.props.refresh && this.props.refresh()
                    }, 2000)
                }else{
                    this.loading = false
                     MyToast.info('新增失败，请稍后尝试');
                }
           })
       }
    }
    componentWillMount() {
       //获取所有基地
       GardenAction.GetAllBase().then((data) => {
           console.log('基地',data)
           if (data.suc) {
               let model = data.data
               let arrInt = []
               model.forEach((i, index) => {
                   arrInt[index] = {}
                   arrInt[index].label = i.name + ''
                   arrInt[index].value = i.id + ''
               });
               this.setState({
                   baseList: arrInt,
               })
           } else {
               MyToast.info('数据获取失败，稍后尝试');
           }
       })
       //获取所有园区
       GardenAction.GetAllGarden().then((data) => {
           console.log('园区',data)
           if (data.suc) {
               let model = data.data
               let arrInt = []
               model.forEach((i, index) => {
                   arrInt[index] = {}
                   arrInt[index].label = i.name + ''
                   arrInt[index].value = i.id + ''
               });
               this.setState({
                   gardenList: arrInt,
               })
           } else {
               MyToast.info('数据获取失败，稍后尝试');
           }
       })
       //获取产品
       let input = {
            plantBaseId:'',
            plantBaseLandId: '',
       }
       GardenAction.GetAllCrop({input}).then((data) => {
           console.log('产品',data)
           if (data.suc) {
               this.setState({
                   gardenCropList: data.data,
               })
           } else {
               MyToast.info('数据获取失败，稍后尝试');
           }
       })
       //编辑页面
       if(this.props.id){
            MineAction.GetUse(this.props.id).then((data) => {
                if (data.suc) {
                    console.log(data.data)
                    this.setState({
                        model: data.data,
                        loading: false,
                        workDay: new Date(data.data.workDay),
                        plantBaseId: [data.data.plantBaseId + ''],
                        plantBaseLandId: [data.data.plantBaseLandId+''],
                        plantGardenId: [data.data.plantGardenId+''],
                        cropId: data.data.cropId,
                        breedId: data.data.breedId,
                        gardenCropState: [data.data.cropId, data.data.breedId],
                        workContentId: [data.data.workContentId+''],
                        workDays: data.data.workDays+'',
                        workCost: data.data.workCost+'',
                        remark: data.data.remark,
                        
                    },()=>{
                        this.GetAllLand(this.state.plantBaseId)
                        this.getworkContent(this.state.cropId)
                    })
                } else {
                    MyToast.info('数据获取失败，稍后尝试');
                }
            })
       }
    }
    //获取所有地块
    GetAllLand(id) {
        GardenAction.GetAllLand(id).then((data) => {
            if (data.suc) {
                let model = data.data
                let arrInt = []
                model.forEach((i, index) => {
                    arrInt[index] = {}
                    arrInt[index].label = i.landName + ''
                    arrInt[index].value = i.id + ''
                });
                this.setState({
                    landList: arrInt,
                })
            } else {
                MyToast.info('数据获取失败，稍后尝试');
            }
        })
    }
    //获取劳作内容
    getworkContent(input){
        GardenAction.GetAllWorkContent(input).then((data) => {
            console.log(data)
            if (data.suc) {
                let model = data.data
                let arrInt = []
                model.forEach((i, index) => {
                    arrInt[index] = {}
                    arrInt[index].label = i.opName + ''
                    arrInt[index].value = i.id + ''
                });
                this.setState({
                    workContentList: arrInt,
                })
            } else {
                MyToast.info('数据获取失败，稍后尝试');
            }
        })
    }
    onErrorClick = () => {
        MyToast.info('请填写正确的信息，且不能为空');
    }
    render() {
        return (
            <ScrollView style={{ backgroundColor: '#f5f5f5' }}>
                <View>
                    <List>
                        <DatePicker
                            value={this.state.workDay  }
                            mode="date"
                            minDate={new Date('2018-01-01')}
                            onChange={(text) => {
                                this.setState({
                                    workDay  : text
                                })
                            }}
                            format="YYYY-MM-DD"
                        >
                            <Item arrow="horizontal" >日期</Item>
                        </DatePicker>
                    </List>
                    < List >
                        <Picker
                            registerNumber="基地"
                            data={this.state.baseList}
                            cols={1}
                            value={this.state.plantBaseId}
                            onOk={(val) => {
                                this.setState({ plantBaseId: val })
                                this.GetAllLand(val[0])
                            }}
                            style={{ color: '#000' }}
                        >
                            <Item><Text style={{ fontSize: 17, color: '#000' }}>基地</Text></Item>
                        </Picker>
                    </List>
                    {this.state.plantBaseId? (
                        <List>
                            <Picker
                                registerNumber="地块"
                                data={this.state.landList}
                                cols={1}
                                value={this.state.plantBaseLandId}
                                onOk={(val) => {
                                    this.setState({ plantBaseLandId: val })
                                }}
                                style={{ color: '#000' }}
                            >
                                <Item><Text style={{ fontSize: 17, color: '#000' }}>地块</Text></Item>
                            </Picker>
                        </List>
                    ) : (null)}
                    <List>
                        <Picker
                            registerNumber="园址"
                            data={this.state.gardenList}
                            cols={1}
                            value={this.state.plantGardenId}
                            onOk={
                                (val) => {
                                    this.setState({ plantGardenId: val })
                                }
                            }
                            style={{ color: '#000' }}
                        >
                            <Item><Text style={{ fontSize: 17, color: '#000' }}>标准园</Text></Item>
                        </Picker>
                    </List>
                    <List>
                        <Picker
                            registerNumber="产品"
                            data={this.state.gardenCropList}
                            cols={2}
                            value={this.state.gardenCropState}
                            onOk={
                                (val) => {
                                    this.setState({ gardenCropState: val })
                                    this.getworkContent(val[0])
                                }
                            }
                            style={{ color: '#000' }}
                        >
                            <Item><Text style={{ fontSize: 17, color: '#000' }}>产品</Text></Item>
                        </Picker>
                        {this.state.gardenCropState?<Picker
                            registerNumber="劳作"
                            data={this.state.workContentList}
                            cols={1}
                            value={this.state.workContentId }
                            onOk={
                                (val) => {
                                    console.log(val)
                                    this.setState({ workContentId : val })
                                }
                            }
                            style={{ color: '#000' }}
                        >
                            <Item><Text style={{ fontSize: 17, color: '#000' }}>劳作内容</Text></Item>
                        </Picker>:null}
                    </List>
                    <List>
                        <InputItem
                            type='number'
                            textAlign="right"
                            clear
                            labelNumber={7}
                            onChangeText={(text) => {
                                this.setState({
                                    workDays: text
                                }, () => {
                                    if (!this.state.workDays) {
                                        this.setState({
                                            workDaysError: true
                                        })
                                    } else {
                                        this.setState({
                                            workDaysError: false
                                        })
                                    }
                                })
                            }}
                            error={this.state.workDaysError}
                            onErrorClick={this.onErrorClick}
                            maxLength={50}
                            placeholder="用工数量"
                            value={this.state.workDays}
                        >用工数量(人/天)
                        </InputItem>
                    </List>
                    <List>
                        <InputItem
                            type='number'
                            textAlign="right"
                            clear
                            onChangeText={(text) => {
                                this.setState({
                                    workCost: text
                                }, () => {
                                    if (!this.state.workCost) {
                                        this.setState({
                                            workCostError: true
                                        })
                                    } else {
                                        this.setState({
                                            workCostError: false
                                        })
                                    }
                                })
                            }}
                            error={this.state.workCostError}
                            onErrorClick={this.onErrorClick}
                            maxLength={50}
                            placeholder="成本"
                            value={this.state.workCost}
                        >成本(元)
                        </InputItem>
                    </List>
                    <List>
                        <InputItem
                            textAlign="right"
                            clear
                            onChangeText={(text) => {
                                this.setState({
                                    remark: text
                                }, () => {
                                    if (!this.state.remark) {
                                        this.setState({
                                            remarkError: true
                                        })
                                    } else {
                                        this.setState({
                                            remarkError: false
                                        })
                                    }
                                })
                            }}
                            error={this.state.remarkError}
                            onErrorClick={this.onErrorClick}
                            maxLength={50}
                            placeholder="备注"
                            value={this.state.remark}
                        >备注
                        </InputItem>
                    </List>
                    
                </View>
            </ScrollView>
        );
    }
}
function mapStateToProps() {
    return {

    };
}

module.exports = connect(mapStateToProps)(TestRecordAdd);
const styles = StyleSheet.create({
    // userInfo: store.getAccount()
});
