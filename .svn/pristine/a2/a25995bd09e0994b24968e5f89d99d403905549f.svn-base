import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    Image,
    ScrollView,
    Dimensions,
    TouchableWithoutFeedback,
    ProgressBarAndroid,
    TouchableHighlight,
    StatusBar,
    Alert
} from 'react-native';
import { Button, Grid, Carousel, SearchBar, WingBlank, WhiteSpace, SwipeAction } from 'antd-mobile-rn'
import ListItem from 'root/src/screens/baseComon/ListItem'
import LoadMoreList from 'root/src/screens/baseComon/LoadMoreList.js';
import * as DataAction from 'root/src/actions/dataAuthentication';
import CropStore from 'root/src/stores/crop';
import pesticidesStore from 'root/src/stores/pesticides';
const SCREEN_WIDTH = Dimensions.get('window').width;
const SCREEN_HEIGHT = Dimensions.get('window').height;
const { connect } = require('remx');
let pageIndex = 1;
// @loadingDecorator

//基地
@navigatorDecorator
class Base extends Component {
    constructor(props: {}) {
        super(props);
        this.state = {

        }
        Navigation.mergeOptions(this.props.componentId, {
            topBar: {
                rightButtons: [{
                    ...confirmRightBtn, text: '新增'
                }]
            }
        });
        Navigation.events().bindComponent(this);

    }
    navigationButtonPressed({ buttonId }) {
        this.pushPage({
            component: {
                ...Global.Screens.AddBase,
                passProps: { refresh: this.refresh },
            }
        });
    }
    componentWillMount() {

    }
    refresh = () => {
        this.moreBaseList._onRefresh();
    }
    render() {
        return (
            <ScrollView style={styles.container}>
                <LoadMoreList
                    ref={ref => this.moreBaseList = ref}
                    getData={DataAction.getBaseList}
                    searchParams={{ name: '' }}
                    rowItem={(data) => {
                        return <SwipeAction autoClose style={{ backgroundColor: 'transparent', flex: 1 }} right={[
                            {
                                text: '编辑',
                                onPress: () => {
                                    this.pushPage({
                                        component: {
                                            passProps: { id: data.id, isEdit: true, refresh: this.refresh },
                                            ...Global.Screens.AddBase,
                                            options: {
                                                topBar: {
                                                    title: {
                                                        text: '编辑基地'
                                                    }
                                                }
                                            },
                                        }
                                    });
                                },
                                style: { backgroundColor: 'orange', color: 'white' },
                            }, {
                                text: '删除',
                                onPress: () => {
                                    Alert.alert(
                                        '提示',
                                        "确定删除吗？",
                                        [{
                                            text: '取消',
                                            onPress: () => {
                                                this.loading = false
                                            }
                                        },
                                        {
                                            text: '确定',
                                            onPress: () => {
                                                DataAction.DeleteBase({ idList: [data.id] }).then(
                                                    () => {
                                                        this.refresh();
                                                        Toast.success('删除成功');
                                                    }
                                                )
                                            }
                                        }
                                        ]
                                    );

                                },
                                style: { backgroundColor: 'red', color: 'white' },
                            }
                        ]} >
                            <TouchableHighlight activeOpacity={0.3} underlayColor={'#eee'}
                                onPress={() => {
                                    this.pushPage({
                                        component: {
                                            passProps: { id: data.id },
                                            ...Global.Screens.BaseDetail,
                                            options: {
                                                topBar: {
                                                    title: {
                                                        text: '用药记录详情'
                                                    }
                                                },
                                                bottomTabs: {
                                                    visible: false,
                                                    drawBehind: true
                                                }
                                            },
                                        }
                                    });
                                }}>
                                <ListItem firstItem={data.name} secondItem={data.createTime} thirdItem={data.cityName + data.countyName + data.townName + data.address} />
                            </TouchableHighlight>
                        </SwipeAction>
                    }}
                />
            </ScrollView >
        );
    }
}
function mapStateToProps() {
    return {

    };
}

module.exports = connect(mapStateToProps)(Base);

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    imgStyle: {
        // 设置宽度
        width: Dimensions.get('window').width,
        // 设置高度
        height: 180,
        // 设置图片填充模式
        resizeMode: 'stretch'
    },

});