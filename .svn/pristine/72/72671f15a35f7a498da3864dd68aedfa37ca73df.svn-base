// @flow

import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    ScrollView,
    TextInput,
    Alert,
    TouchableWithoutFeedback
} from 'react-native';
import { List, InputItem, TextareaItem, DatePicker, Picker, ImagePicker, Button, WhiteSpace } from 'antd-mobile-rn';
import * as MineAction from 'root/src/actions/mine';
import Icon from 'react-native-vector-icons/Feather';
import { bold } from 'ansi-colors';
import moment from 'moment';
import InputWriteSelect from 'root/src/screens/baseComon/InputWriteSelect.js'
import pesticidesStore from 'root/src/stores/pesticides';
// import { runInThisContext } from 'vm';
const { connect } = require('remx');
const Item = List.Item;
@navigatorDecorator
class GoodsPage extends Component {
    constructor(props) {
        super(props);
        this.state = {
            plantList: [
                {
                    pesticide: "",
                    registNumber: "",
                    manufacturer: "",
                    madeTime: new Date(),
                    madeTimeStr: new Date(),
                    source: "",
                    usage: 0
                }
            ],
            plantError: [
                {
                    pesticide: false,
                    usage: false,
                }
            ],
        }
        Navigation.mergeOptions(this.props.componentId, {
            topBar: {
                title: {
                    text: '农药选择'
                },
                rightButtons: [
                    confirmRightBtn
                ]
            }
        });
        Navigation.events().bindComponent(this);
    }
    navigationButtonPressed() {
        let nowName = ''
        let nowError = this.state.plantError
        this.state.plantList.map((i, index) => {
            if (!i.pesticide) {
                nowName = 'pesticide'
                nowError[index][nowName] = true
            }
            if (!i.usage) {
                nowName = 'usage'
                nowError[index][nowName] = true
            }
        })
        if (nowName) {
            MyToast.info('请填写作完整的物信息');
            this.setState({
                plantError: nowError
            })
        } else {
            let plantList = this.state.plantList
            plantList.forEach(i => {
                i.madeTime = moment(i.madeTimeStr).format('YYYY-MM-DD');
            });
            pesticidesStore.setGoodsData(plantList)
            this.pop()
            // MineAction.AddPlant({ input: this.state.plantList }).then((data) => {
            //     if (data.suc) {
            //         MyToast.info('保存成功');
            //     } else {
            //         MyToast.info('保存失败，请稍后再试');
            //     }
            // })
        }
    }
    componentWillMount() {
        console.log(this.props.pesticidesData)
        // if (this.props.isLogin) {
        const vm = this
        let nowError = this.state.plantError
        this.iscurrent = this.props.isNow

        let data = this.props.pesticidesData;
        // MineAction.GetPlantList(this.props.isNow).then((data) => {
        if (data && data.length > 0) {
            let nowList = [];
            data.forEach((i, index) => {
                nowList.push({
                    madeTimeStr: new Date(i.madeTime),
                    pesticide: i.goodName,
                    registNumber: i.registerID,
                    manufacturer: i.manufacturerName,
                    madeTime: i.madeTime,
                    source: i.source,
                    usage: i.usage
                })
            })
            vm.setState({
                plantList: nowList,
                plantError: nowError
            })
        } else {
            this.setState({
                plantList: [
                    {
                        pesticide: "",
                        registNumber: "",
                        manufacturer: "",
                        madeTime: new Date(),
                        madeTimeStr: new Date(),
                        source: "",
                        usage: 0
                    }
                ],
            })
        }
        // })
        // }
    }
    changeData(text, index, name) {
        let nowList = this.state.plantList
        let nowError = this.state.plantError
        let textNew = text
        nowList[index][name] = textNew
        debugger;
        if (!text) {
            nowError[index][name] = true
            switch (name) {
                case 'pesticide':
                    MyToast.info('农药名称不能为空');
                    break;
                case 'usage':
                    MyToast.info('用药量不能为空');
                    break;
            }
            this.setState({
                plantError: nowError,
            })
        } else {
            debugger;
            nowError[index][name] = false
            this.setState({
                plantList: nowList,
                plantError: nowError,
            })
        }
    }

    onErrorClick = () => {
        MyToast.info('请填写正确的信息，且不能为空');
    }
    getData = (data, index) => {
        let plantList = this.state.plantList;
        plantList.map((item, i) => {
            console.log(i)
            if (i == index) {
                item.pesticide = data.goodName;
                item.registNumber = data.registerID;
                item.manufacturer = data.manufacturerName
                // item.madeTime = data.madeTime;
                // item.source = data.source;
                item.usage = data.usage
            }
        })
        console.log(plantList)
        this.setState({
            plantList
        })
    }
    render() {
        console.log(this.state.plantList)
        return (
            <ScrollView style={{ backgroundColor: '#f5f5f5' }}>
                {
                    this.state.plantList.map((i, index) => {
                        return (
                            <View key={index}>
                                <List>
                                    <View style={{ justifyContent: 'space-between', flexDirection: 'row' }}>
                                        <Text style={{ lineHeight: 50, fontSize: 18, marginLeft: 15, color: '#000', fontWeight: 'bold' }}>农药（{index + 1}）</Text>
                                        {/* 删除农药列表 */}
                                        {index == 0 ? (null) : (
                                            <TouchableWithoutFeedback onPress={() => {
                                                let nowList = this.state.plantList
                                                nowList.splice(index, 1)
                                                this.setState({
                                                    plantList: nowList
                                                })
                                            }}>
                                                <View>
                                                    <Text style={{ textAlign: 'center', fontSize: 18, color: '#000', lineHeight: 50, marginRight: 15 }}><Icon color='red' name='trash-2' size={18} /></Text>
                                                </View>
                                            </TouchableWithoutFeedback>
                                        )}
                                    </View>
                                </List>
                                <List>
                                    <InputWriteSelect _name={'农药名称'}
                                        _type='goods'
                                        
                                        _value={i.pesticide}
                                        onChange={(text) => {
                                            this.changeData(text, index, 'pesticide')
                                        }}
                                        _selectCrop={() => {
                                            this.pushPage({
                                                component: {
                                                    passProps: { getData: this.getData, index: index },
                                                    ...Global.Screens.PesticidesList
                                                }
                                            })
                                        }} />
                                </List>
                                <List>
                                    <InputItem
                                        textAlign="right"
                                        clear
                                        onChangeText={(text) => {
                                            this.changeData(text, index, 'registNumber')
                                        }}
                                        onErrorClick={this.onErrorClick}
                                        maxLength={20}
                                        placeholder="登记证号"
                                        value={i.registNumber}
                                    >登记证号
                                    </InputItem>
                                </List>
                                <List>
                                    <InputItem
                                        textAlign="right"
                                        clear
                                        onChangeText={(text) => {
                                            this.changeData(text, index, 'manufacturer')
                                        }}
                                        onErrorClick={this.onErrorClick}
                                        maxLength={20}
                                        placeholder="生产企业"
                                        value={i.manufacturer}
                                    >生产企业
                                    </InputItem>
                                </List>
                                <List>
                                    <DatePicker
                                        value={i.madeTimeStr}
                                        mode="date"
                                        minDate={new Date('2010-01-01')}
                                        onChange={(text) => {
                                            this.changeData(text, index, 'madeTimeStr')
                                        }}
                                        format="YYYY-MM-DD"
                                    >
                                        <Item arrow="horizontal" >批号/生产日期</Item>
                                    </DatePicker>
                                </List>
                                <List>
                                    <InputItem
                                        textAlign="right"
                                        clear
                                        onChangeText={(text) => {
                                            this.changeData(text, index, 'source')
                                        }}

                                        onErrorClick={this.onErrorClick}
                                        maxLength={20}
                                        placeholder="农药来源"
                                        value={i.source}
                                    >农药来源
                                    </InputItem>
                                </List>
                                <List>
                                    <InputItem
                                        labelNumber={9}
                                        type='number'
                                        textAlign="right"
                                        clear
                                        onChangeText={(text) => {
                                            this.changeData(text, index, 'usage')
                                        }}
                                        error={this.state.plantError[index]['usage']}
                                        placeholder="用药量"
                                        value={i.usage}
                                        extra="亩"
                                    >用药量
                                    </InputItem>
                                </List>
                                <WhiteSpace size="sm" />
                            </View>
                        )
                    })
                }
                <TouchableWithoutFeedback onPress={() => {
                    let nowList = this.state.plantList
                    nowList.push(
                        {
                            plantName: '',
                            area: '',
                            period: '',
                            year: new Date(),
                            outPut: '',
                            iscurrent: this.props.isNow,
                            unit: "亩"
                        }
                    )
                    let nowError = this.state.plantError
                    nowError.push(
                        {
                            plantName: false,
                            area: false,
                            period: false,
                        }
                    )
                    this.setState({
                        plantList: nowList,
                        plantError: nowError
                    })
                }}>
                    <View>
                        <Text style={{ textAlign: 'center', fontSize: 18, color: '#000', lineHeight: 50 }}><Icon name='plus-circle' size={18} />添加</Text>
                    </View>
                </TouchableWithoutFeedback>
            </ScrollView>
        );
    }
}
function mapStateToProps() {
    return {
        pesticidesData: pesticidesStore.getPesticidesData()
    };
}

module.exports = connect(mapStateToProps)(GoodsPage);
const styles = StyleSheet.create({
    // userInfo: store.getAccount()
});
