// @flow

import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    Image,
    ScrollView,
    TouchableOpacity,
    Dimensions,
    TouchableHighlight
} from 'react-native';
import { List, InputItem, Button, SwipeAction } from 'antd-mobile-rn';
import Icon from 'react-native-vector-icons/FontAwesome';
import { iconsMap, iconsLoaded } from 'root/src/utils/IconLoader';
import LoadMoreList from 'root/src/screens/baseComon/LoadMoreList.js';
import SolutionList from 'root/src/screens/baseComon/SolutionList';
import * as SolutionAction from 'root/src/actions/solution';
const { connect } = require('remx');
@navigatorDecorator
class Solution extends Component {
    constructor(props) {
        super(props);
        this.state = {
            storeName: '',
            classificCode: '',
            search: ''
        }
        Navigation.mergeOptions(this.props.componentId, {
            topBar: {
                rightButtons: [
                    {
                        ...confirmRightBtn, text: '搜索'
                    }
                ]
            }
        });
        Navigation.events().bindComponent(this);
    }
    navigationButtonPressed({ buttonId }) {
        this.pushPage({
            component: {
                ...Global.Screens.SolutionSearch,
                passProps: { searchFn: this.searchFn },
            }
        });
    }
    refresh = () => {
        this.moreListInst._onRefresh();
    }
    searchFn = (item) => {
        this.setState({
            classificCode: item.classificCode,
            search: item.search
        }, this.refresh)
    }
    render() {
        return (
            <LoadMoreList
                // colums={2}
                ref={ref => this.moreListInst = ref}
                getData={SolutionAction.GetList}
                searchParams={{ keyword: this.state.search }}
                rowItem={(data) => {
                    return <TouchableHighlight activeOpacity={0.3} underlayColor={'#eee'}
                        style={{ backgroundColor: 'transparent', flex: 1 }}
                        onPress={() => {
                            this.pushPage({
                                component: {
                                    passProps: { id: data.id, refresh: this.refresh },
                                    ...Global.Screens.SolutionDetail,
                                    options: {
                                        topBar: {
                                            title: {
                                                text: data.messageTitle
                                            }
                                        },
                                        bottomTabs: {
                                            visible: false,
                                            drawBehind: true
                                        }
                                    },
                                }
                            });
                        }}>
                        <SolutionList content={data} />
                    </TouchableHighlight>
                }}
            />

        );
    }
}
function mapStateToProps() {
    // return {
    // };
}
module.exports = connect(mapStateToProps)(Solution);
const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
});
