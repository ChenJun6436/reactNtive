// @flow

import React, { Component } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  ImageBackground,
  Dimensions,
  Image,
  findNodeHandle,
  Alert,
  AsyncStorage,
  TouchableOpacity
} from 'react-native';
// import Divide from 'react-native-divide'
import Icon from 'react-native-vector-icons/FontAwesome';
import { Input } from 'react-native-elements';
import { Button, InputItem, Checkbox } from 'antd-mobile-rn';
import requestPermission from 'root/src/utils/requestPermissions';//获取相机及其他权限
import * as AccountAction from 'root/src/actions/account';

import Geolocation from 'Geolocation';
const { connect } = require('remx');
const SCREEN_WIDTH = Dimensions.get('window').width;
const SCREEN_HEIGHT = Dimensions.get('window').height;
const BG_IMAGE = require('root/img/login.jpg');
const LOGO_IMAGE = require('root/img/logo.png');
import storage from 'react-native-sync-storage';
const QQ_IMAGE = require('root/img/qq.png');
const WCHAT_IMAGE = require('root/img/wChat.png');

const AgreeItem = Checkbox.AgreeItem;
const BaiduMap_URL = 'https://api.map.baidu.com/geocoder/v2/?output=json&ak=Xl9hFQvnrH57BX1AnkBCVaWB&location='


@navigatorDecorator
export default class LoginScreen extends Component {
  constructor(props: Props) {
    super(props);
    this.state = {
      viewRef: null,
      loginName: '',
      loginPwd: '',
      isLogin: false,
    };
  }
  componentWillMount() {
    console.log('321')
    this.getLocation()
    let keys = ["loginName", "loginPwd"];
    let self = this;
    AsyncStorage.multiGet(keys, function (errs, result) {
      //如果发生错误，这里直接返回（return）防止进入下面的逻辑
      if (errs) {
        return;
      }
      self.setState({
        loginName: (result[0][1] != null) ? result[0][1] : '',
        loginPwd: (result[1][1] != null) ? result[1][1] : ''
      })
    });
  }
  componentDidMount() {
    //requestPermission();
  }
  login = () => {
    if (!this.state.loginName) {
      Toast.info('请填写用户名', 3);
      return;
    }
    if (!this.state.loginPwd) {
      Toast.info('请填写密码', 3);
      return;
    }
    this.setState({ submitLoading: true })
    let vm = this
    AccountAction.login({ input: this.state }).then(( suc ) => {
      if (suc.suc) {
        vm.getLocation()
        Toast.info('登录成功', 3);
        Global.Navigate.startIndexScreen()
      }
      else {
        Toast.info(suc.msg, 2);
        return;
      }
      this.setState({ submitLoading: false })
    })

  }
  getLongitudeAndLatitude = () => {
     
    //获取位置再得到城市先后顺序，通过Promise完成
    return new Promise((resolve, reject) => {
        Geolocation.getCurrentPosition(
            location => {
                //可以获取到的数据
                var result = "速度：" + location.coords.speed +
                    "\n经度：" + location.coords.longitude +
                    "\n纬度：" + location.coords.latitude +
                    "\n准确度：" + location.coords.accuracy +
                    "\n行进方向：" + location.coords.heading +
                    "\n海拔：" + location.coords.altitude +
                    "\n海拔准确度：" + location.coords.altitudeAccuracy +
                    "\n时间戳：" + location.timestamp;

                // ToastAndroid.show("UTIl" + location.coords.longitude, ToastAndroid.SHORT);
                resolve([location.coords.longitude, location.coords.latitude]);
            },
            error => {
                // Alert.alert("获取位置失败：" + error, "")
                reject(error);
            }
        );
    })
  }

  getCityLocation = () => {
      return new Promise((resolve, reject) => {
          //获取经纬度的方法返回的是经纬度组成的数组
          this.getLongitudeAndLatitude().then((locationArr) => {
              // Alert.alert("", "" + locationArr[1]);
              let longitude = locationArr[0];
              let latitude = locationArr[1];
              this.getNetData(BaiduMap_URL + latitude + "," + longitude)
                  .then((data) => {
                      console.log(data, 'aaa')
                      if (data.status == 0) {
                          resolve(data);
                      } else {
                          console.log(data)
                          // reject(ErrorDeal.getError(data.code));
                      }
                  }).catch((data) => {
                      console.log(data)
                      // reject(ErrorDeal.getError(data.code));
                  })

          }).catch((data) => {
              console.log(data)
              // reject(ErrorDeal.getError(data.code));
          })

      })
  }

  //获取网络数据
  getNetData = (url) => {
      //  
      return new Promise((resolve, reject) => {
          fetch(url).then((response) => response.json())
              .then((responseData) => {
                  resolve(responseData);
              })
              .catch((error) => {
                  console.log(error)
                  // reject(ErrorDeal.getError(NetWork_Error))
              })
              .done()
      })
  }
  //获取位置
  getLocation = () => {
      this.getCityLocation().then((data) => {
           
          // Alert.alert("位置？", "" + JSON.stringify(data));
          this._confirmCity(data);

      }).catch((error) => {
           
          //ToastAndroid.show("失败" + JSON.stringify(error), ToastAndroid.SHORT);
      });
  }

  _confirmCity = (data) => {
      console.log(data, 'bbb')
      let address = data.result.addressComponent;
      if (address != "") {
        storage.set('cityName',address.city)
        console.log(11111111111)
        
          // Alert.alert("城市定位", "\n当前城市为" + address.province + address.city + "\n \n 是否设为当前城市？\n",
          //     [
          //         {
          //             text: "设为当前城市", onPress: () => {
          //                 this.setCurrentCity(address.city)
          //             }
          //         },
          //         { text: "取消" }
          //     ]
          // )
      }
  }
  imageLoaded = () => {
    this.setState({ viewRef: findNodeHandle(this.backgroundImage) });
  }
  render() {
    const { Account, navigator } = this.props;
    // const { getFieldProps } = this.props.form;
    return (
      <View style={styles.container}>
        <Image
          ref={(img) => { this.backgroundImage = img; }}
          source={BG_IMAGE}
          style={styles.bgImage}
          onLoadEnd={this.imageLoaded}
        />
        <View style={styles.loginView}>
          <View style={styles.register}>
            <TouchableOpacity onPress={() => {
              this.pushPage({
                component: {
                  ...Global.Screens.SetRegisterCode
                }
              })
            }}>
              <Text style={{ color: '#ccc', fontSize: 20 }}>
                注册
              </Text>
            </TouchableOpacity>
          </View>
          <View style={styles.loginTitle}>
            <Image
              style={{ width: 180, height: 90 }}
              source={LOGO_IMAGE}
            />
            <View style={styles.title}>
              <Text style={styles.travelText}>农户APP</Text>
            </View>
          </View>
          <View style={styles.loginInput}>
            <View style={{ marginVertical: 15 }}>
              <InputItem
                style={{ height: 40, width: '90%', backgroundColor: 'transparent', borderBottomWidth: 1, borderBottomColor: 'white', }}
                clear
                value={this.state.loginName}
                onChange={(value: any) => {
                  this.setState({
                    loginName: value,
                  });
                }}
                labelNumber={2}
                placeholder='请输入用户名'
                placeholderTextColor='#cccccc'
              >
                <Icon
                  name='user'
                  color='#ffffff'
                  size={25}
                />
              </InputItem>
            </View>
            <View style={{ marginVertical: 15 }}>
              <InputItem
                style={{ height: 40, width: '90%', backgroundColor: 'transparent', borderBottomWidth: 1, borderBottomColor: 'white', }}
                clear
                type="password"
                value={this.state.loginPwd}
                onChange={(value: any) => {
                  this.setState({
                    loginPwd: value,
                  });
                }}
                extra={<TouchableOpacity onPress={() => {
                  this.pushPage({
                    component: {
                      ...Global.Screens.SetNewCode
                    }
                  })
                }}>
                  <Text style={{ color: '#ffffff' }}>
                    忘记密码
                  </Text>
                </TouchableOpacity>}
                labelNumber={2}
                placeholder='请输入密码'
                placeholderTextColor='#cccccc'
              >
                <Icon
                  name='lock'
                  color='#ffffff'
                  size={25}
                />
              </InputItem>
            </View>
            <View style={{ marginVertical: 15, width: '95%', }} >
              <AgreeItem
                checked={this.state.isLogin}
                checkboxStyle={{ tintColor: '#ffffff' }}
                onChange={(event: any) => {
                  this.setState({ isLogin: event.target.checked });
                }}
              >
                <TouchableOpacity onPress={() => {
                  this.pushPage({
                    component: {
                      ...Global.Screens.Disclaimer
                    }
                  })
                }}>
                  <Text style={{ color: '#ffffff' }}>
                    同意《免责申明》
              </Text>
                </TouchableOpacity>
              </AgreeItem>
            </View>
            <View style={{ marginVertical: 35, width: '100%', alignItems: 'center', }}>
              <Button
                style={{ height: 40, width: '90%', backgroundColor: this.state.isLogin ? 'transparent' : '#cccccc', borderWidth: 2, borderColor: 'white', borderRadius: 30 }}
                onClick={this.login}
                disabled={!this.state.isLogin}
              >
                <Text style={{ fontWeight: 'bold', color: 'white' }}>登陆</Text>
              </Button>
            </View>
          </View>
          <View style={styles.fastLogin}>
            <View style={styles.fastTitle}>
              <View style={styles.lineTitle}></View>
              <View style={styles.textTitle}><Text style={{ color: 'white', fontSize: 18, }}>快捷登录</Text></View>
              <View style={styles.lineTitle}></View>
            </View>
            <View style={styles.fastImg}>
              <Image
                style={{ width: 50, height: 50, marginRight: 80, marginTop: 20, }}
                source={QQ_IMAGE}
              />
              <Image
                style={{ width: 50, height: 50, marginTop: 20, }}
                source={WCHAT_IMAGE}
              />
            </View>
          </View>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,

  },
  bgImage: {
    position: "absolute",
    flex: 1,
    top: 0,
    left: 0,
    width: SCREEN_WIDTH,
    height: SCREEN_HEIGHT
  },
  title: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  travelText: {
    color: '#ffffff',
    fontSize: 26,
    fontFamily: 'bold',
    textAlign: 'center',
    width: '100%',
    height: 40,
    lineHeight: 40,
  },
  loginView: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  register: {
    position: 'absolute',
    top: 30,
    right: 20,
  },
  loginTitle: {
    marginTop: 80,
  },
  loginInput: {
    width: '100%',
    alignItems: 'center',
  },
  fastLogin: {
    width: '100%',
    alignItems: 'center',
    marginTop: 50,
  },
  fastTitle: {
    width: '90%',
    justifyContent: 'space-between',
    flexDirection: 'row',
    alignItems: 'center',
  },
  lineTitle: {
    borderWidth: 1,
    borderColor: '#ffffff',
    width: '38%',
    height: 1
  },
  fastImg: {
    justifyContent: 'center',
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 40
  }
})


