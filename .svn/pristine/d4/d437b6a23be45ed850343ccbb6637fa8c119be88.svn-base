import React, { Component } from 'react';
import {
  StyleSheet,
  Text,
  View,
  Image,
  ScrollView,
  Dimensions,
  TouchableWithoutFeedback,
  ProgressBarAndroid,
  findNodeHandle
} from 'react-native';
import { Button, Grid, Carousel, SearchBar, WingBlank, WhiteSpace, Modal } from 'antd-mobile-rn'
import store from 'root/src/stores/account';
import BrTag from 'root/src/screens/baseComon/BrTag.js'
import moment from "moment/moment"
import storage from 'react-native-sync-storage';
import ImgLeftText2Right from 'root/src/screens/baseComon/ImgLeftText2Right.js'
import VideoTopText2Bottom from 'root/src/screens/baseComon/VideoTopText2Bottom'
import * as AgInfoAction from 'root/src/actions/agInfo'
const SCREEN_WIDTH = Dimensions.get('window').width;
const SCREEN_HEIGHT = Dimensions.get('window').height;
const BG_IMAGE = require('root/img/userInfo.jpg');
const { connect } = require('remx');
const alert = Modal.alert;
let pageIndex = 1;
let pageSize = 3;

@navigatorDecorator
class Main extends Component {
  constructor(props: {}) {
    super(props);
    const { App, navigator, Message } = this.props;
    this.state = {
      AgInfoList: 'loading',
      AgInfoZhongList: 'loading',
      AgInfoYangList: [],
      weatherData: 1,
      cityName: storage.get('cityName'),
    }
  }
  imageLoaded = () => {
    this.setState({ viewRef: findNodeHandle(this.backgroundImage) });
  }
  render() {
    let data = [
      {
        icon: <Image source={require('root/img/person.png')} style={styles.icon} />,
        text: '个人信息',
        uri: 'MineEditor'
      },
      {
        icon: <Image source={require('root/img/push.png')} style={styles.icon} />,
        text: '我的发布',
        uri: 'MinePublish'
      },
      {
        icon: <Image source={require('root/img/message.png')} style={styles.icon} />,
        text: '消息中心',
        uri: 'Build'
      },
      {
        icon: <Image source={require('root/img/set.png')} style={styles.icon} />,
        text: '设置',
        uri: 'Build'
      },
      {
        icon: <Image source={require('root/img/change.png')} style={styles.icon} />,
        text: '切换账号',
        uri: 'logout'
      },
    ]

    return (
      <ScrollView style={styles.container}>
        {/* <View style={{}}></View> */}
        {/* <WingBlank size='sm'> */}
        <View>
          <Image
            ref={(img) => { this.backgroundImage = img; }}
            source={BG_IMAGE}
            style={styles.bgImage}
            onLoadEnd={this.imageLoaded}
          />
          <View style={styles.head}>
            <View style={{ flexDirection: 'row', justifyContent: 'center', alignItems: 'center' }}>
              <Image source={require('root/img/head_portrait.png')} style={styles.headIcon} />
              {
                this.props.avatar ? <Image
                  source={{ uri: ImgUrl + this.props.avatar }}
                  style={styles.headIcon}
                /> : <Image
                    source={require('root/img/head_portrait.png')}
                    style={styles.headIcon}
                  />
              }
              <Text style={styles.headTetx}>{this.props.userInfo.loginName}</Text>
            </View>
          </View>
          <View style={{ marginTop: 40 }}></View>
          <View style={styles.main}>
            {data.map((i, index) => {
              if (i.uri == 'logout') {
                return <TouchableWithoutFeedback
                  key={index}
                  onPress={() => {
                    alert('提示', '是否确定退出当前登录账号?', [
                      { text: '取消', onPress: () => console.log('cancel') },
                      {
                        text: '确定', onPress: () => {
                          storage.remove('token');
                          Global.Navigate.startLoginScreen();
                        }
                      },
                    ])
                  }}>
                  <View style={styles.boxBox}>
                    <View style={styles.imgBox}>{i.icon}</View>
                    <Text style={styles.imgTetx}>{i.text}</Text>
                  </View>
                </TouchableWithoutFeedback>
              }
              else {
                return (
                  <TouchableWithoutFeedback
                    key={index}
                    onPress={() => {
                      this.pushPage({
                        component: {
                          ...Global.Screens[i.uri],
                        }
                      })
                    }}>
                    <View style={styles.boxBox}>
                      <View style={styles.imgBox}>{i.icon}</View>
                      <Text style={styles.imgTetx}>{i.text}</Text>
                    </View>
                  </TouchableWithoutFeedback>
                )
              }
            })}
          </View>
        </View>
      </ScrollView>
    );
  }
}
function mapStateToProps() {
  return {
    userInfo: store.getAccount(),
    avatar: store.getAvatar(),
  };
}

module.exports = connect(mapStateToProps)(Main);

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  head: {
    justifyContent: 'center',
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    height: 150,
  },
  headIcon: {
    width: 80,
    height: 80,
    position: "absolute",
    top: 44,
    left: -10,
    zIndex: 1000,
    borderRadius: 40
  },
  headTetx: {
    textAlign: 'center',
    fontSize: 18,
    color: '#fff',
    fontWeight: 'bold'
  },
  main: {
    backgroundColor: '#fff',
    flexDirection: 'row',
    justifyContent: 'space-between',
    flexWrap: 'wrap',
    paddingBottom: 10,
  },
  boxBox: {
    width: '25%',
  },
  imgBox: {
    justifyContent: 'center',
    width: '100%',
    flexDirection: 'row',
    height: 75,
  },
  imgTetx: {
    textAlign: 'center',
  },
  icon: {
    width: 50,
    height: 50,
    marginTop: 15,
    marginBottom: 15,
  },
  bgImage: {
    position: "absolute",
    flex: 1,
    top: 0,
    left: 0,
    width: SCREEN_WIDTH,
    height: 150
  },
});