// @flow

import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    ScrollView,
    TextInput,
    Alert,
    TouchableWithoutFeedback
} from 'react-native';
import { List, InputItem, TextareaItem, DatePicker, Picker, ImagePicker, Button, WhiteSpace } from 'antd-mobile-rn';
import * as MineAction from 'root/src/actions/mine';
import * as ToolAction from 'root/src/actions/tools';

import Icon from 'react-native-vector-icons/FontAwesome';
import { bold } from 'ansi-colors';
import moment from 'moment';
// import { runInThisContext } from 'vm';
const { connect } = require('remx');
const Item = List.Item;
@navigatorDecorator
class MinePlant extends Component {
    constructor(props) {
        super(props);
        this.loading = false
        this.state = {
            toolsList: [],
            toolsState: '',
            plantList: [
            ],
            plantError: [
                {
                    plantName: false,
                    area: false,
                    period: false,
                }
            ],
        }
        Navigation.mergeOptions(this.props.componentId, {
            topBar: {
                title: {
                    text: this.props.isNow == 'true' ? '当前种养品' : '计划种养品'
                },
                rightButtons: [
                    confirmRightBtn
                ]
            }
        });
        Navigation.events().bindComponent(this);
    }
    navigationButtonPressed() {
        if (this.loading) {
            return false
        }
        const ret = /^(([1-9][0-9]*)|(([0]\.\d{1,2}|[1-9][0-9]*\.\d{1,2})))$/;
        let nowName = ''
        let nowToast = ''
        let nowError = this.state.plantError
        this.state.plantList.map((i, index) => {
            if (!i.plantName) {
                nowName = 'plantName'
                nowError[index][nowName] = true
                nowToast = '请填写作物名'
            } else if (!i.area) {
                nowName = 'area'
                nowError[index][nowName] = true
                nowToast = '请填写面积'
            } else if (!ret.test(i.area)) {
                nowName = 'area'
                nowError[index][nowName] = true
                nowToast = '面积应大于0，且最多两位小数的数字'
            } else if (!i.period) {
                nowName = 'period'
                nowError[index][nowName] = true
                nowToast = '请填写生长周期'
            } else if (!ret.test(i.period)) {
                nowName = 'period'
                nowToast = '生长周期应大于0，且最多两位小数的数字'
                nowError[index][nowName] = true
            } else if (!ret.test(i.outPut)) {
                nowName = 'outPut'
                nowToast = '预计产量应大于0，且最多两位小数的数字'
            }
        })

        if (nowName) {
            MyToast.info(nowToast)
            this.setState({
                plantError: nowError
            })
        } else {
            this.loading = true
            let plantList = this.state.plantList
            plantList.forEach(i => {
                i.year = moment(i.yearStr).format('YYYY-MM-DD');
            });
            MineAction.AddPlant({ input: this.state.plantList }).then((data) => {
                if (data.suc) {
                    MyToast.success('保存成功');
                    setTimeout(() => {
                        this.loading = false
                    }, 2000)
                } else {
                    MyToast.info(data.msg)
                    this.loading = false
                }
            })
        }
    }
    componentWillMount() {
        //获取器械
        ToolAction.ToolsList({ input: {} }).then((data) => {
            if (data.suc) {
                let model = data.data
                let arrInt = []
                model.forEach((i, index) => {
                    arrInt[index] = {}
                    arrInt[index].label = i.name + ''
                    arrInt[index].value = i.id + ''
                });
                this.setState({
                    toolsList: arrInt,
                })
            } else {
                MyToast.info('器械获取失败，稍后尝试');
            }
        })
        if (this.props.isLogin) {
            const vm = this
            let nowError = this.state.plantError
            this.iscurrent = this.props.isNow
            MineAction.GetPlantList(this.props.isNow).then((data) => {
                if (data.data.length > 0) {
                    let nowList = data.data
                    nowList.forEach((i, index) => {
                        if (i.yearStr) {
                            i.yearStr = new Date(i.yearStr)
                        }
                        if (index > 0) {
                            nowError.push(
                                {
                                    plantName: false,
                                    area: false,
                                    period: false,
                                }
                            )
                        }
                    })
                    vm.setState({
                        plantList: nowList,
                        plantError: nowError
                    })
                } else {
                    this.setState({
                        plantList: [
                            {
                                plantName: '',
                                area: '',
                                period: '',
                                year: new Date(),
                                outPut: '',
                                iscurrent: this.props.isNow,
                                unit: "亩"
                            }
                        ],
                    })
                }
            })
        }
    }
    changeData(text, index, name) {
        let nowList = this.state.plantList
        let nowError = this.state.plantError
        let textNew = text
        nowList[index][name] = textNew
        if (!text) {
            nowError[index][name] = true
            switch (name) {
                case 'plantName':
                    MyToast.info('作物名称不能为空');
                    break;
                case 'area':
                    MyToast.info('面积不能为空');
                    break;
                case 'period':
                    MyToast.info('生长周期不能为空');
                    break;
            }
            this.setState({
                plantError: nowError,
            })
        } else {
            nowError[index][name] = false
            this.setState({
                plantList: nowList,
                plantError: nowError,
            })
        }
    }

    onErrorClick = () => {
        MyToast.info('请填写正确的信息，且不能为空');
    }
    render() {
        return (
            <ScrollView style={{ backgroundColor: '#f5f5f5' }}>
                {
                    this.state.plantList.map((i, index) => {
                        return (
                            <View key={index}>
                                <List>
                                    <View style={{ justifyContent: 'space-between', flexDirection: 'row' }}>
                                        <Text style={{ lineHeight: 50, fontSize: 18, marginLeft: 15, color: '#000', fontWeight: 'bold' }}>土地（{index + 1}）</Text>
                                        {/* 删除土地 */}
                                        {index == 0 ? (null) : (
                                            <TouchableWithoutFeedback onPress={() => {
                                                let nowList = this.state.plantList
                                                nowList.splice(index, 1)
                                                this.setState({
                                                    plantList: nowList
                                                })
                                            }}>
                                                <View>
                                                    <Text style={{ textAlign: 'center', fontSize: 18, color: '#000', lineHeight: 50, marginRight: 15 }}><Icon color='red' name='trash' size={18} /></Text>
                                                </View>
                                            </TouchableWithoutFeedback>
                                        )}
                                    </View>
                                </List>
                                <List>
                                    <InputItem
                                        labelNumber={7}
                                        textAlign="right"
                                        clear
                                        onChange={(text) => {
                                            this.changeData(text, index, 'plantName')
                                        }}
                                        error={this.state.plantError[index]['plantName']}
                                        onErrorClick={this.onErrorClick}
                                        maxLength={20}
                                        placeholder="输入名称"
                                        value={i.plantName}
                                    >种植（养）作物
                                    </InputItem>
                                </List>
                                <List>
                                    <InputItem
                                        type='number'
                                        textAlign="right"
                                        clear
                                        onChange={(text) => {
                                            this.changeData(text, index, 'area')
                                        }}
                                        error={this.state.plantError[index]['area']}
                                        onErrorClick={this.onErrorClick}
                                        maxLength={20}
                                        placeholder="输入面积"
                                        value={i.area + ''}
                                        extra="亩"
                                    >面积
                                    </InputItem>
                                </List>
                                <List>
                                    <DatePicker
                                        value={i.yearStr}
                                        mode="date"
                                        minDate={new Date('2010-01-01')}
                                        onChange={(text) => {
                                            this.changeData(text, index, 'yearStr')
                                        }}
                                        format="YYYY-MM-DD"
                                    >
                                        <Item arrow="horizontal" >种（养）日期</Item>
                                    </DatePicker>
                                </List>
                                <List>
                                    <InputItem
                                        type='number'
                                        textAlign="right"
                                        clear
                                        onChange={(text) => {
                                            this.changeData(text, index, 'period')
                                        }}
                                        error={this.state.plantError[index]['period']}
                                        onErrorClick={this.onErrorClick}
                                        maxLength={20}
                                        placeholder="输入生长周期"
                                        value={i.period}
                                        extra="天"
                                    >生长周期
                                    </InputItem>
                                </List>
                                <List>
                                    <InputItem
                                        type='number'
                                        textAlign="right"
                                        clear
                                        onChange={(text) => {
                                            this.changeData(text, index, 'outPut')
                                        }}
                                        placeholder="输入预计产量"
                                        value={i.outPut}
                                        extra="斤"
                                    >预计产量
                                    </InputItem>
                                </List>
                                <List>
                                    <View style={{ flexDirection: 'row' }}>
                                        <View style={{ width: '50%' }}>
                                            <Picker
                                                registerNumber="单位"
                                                data={this.state.toolsList}
                                                cols={1}
                                                value={i.agriMachineId?[i.agriMachineId]:''}
                                                onOk={(val) => {
                                                    this.changeData(val[0], index, 'agriMachineId')
                                                }}
                                            // style={{ color: '#000', width: '40%' }}
                                            >
                                                <Item><Text style={{ fontSize: 17, color: '#000' }}>器械</Text></Item>
                                            </Picker>
                                        </View>
                                        <View style={{ width: '50%' }}>
                                            <InputItem
                                                textAlign="right"
                                                clear
                                                onChangeText={(text) => {
                                                    this.changeData(text, index, 'agriMachineQuantity')
                                                }}
                                                maxLength={50}
                                                placeholder="输入数量"
                                                type='number'
                                                value={i.agriMachineQuantity + ''}
                                            >数量
                                    </InputItem>
                                        </View>
                                    </View>
                                </List>
                                <WhiteSpace size="sm" />
                            </View>

                        )
                    })
                }
                <TouchableWithoutFeedback onPress={() => {
                    let nowList = this.state.plantList
                    nowList.push(
                        {
                            plantName: '',
                            area: '',
                            period: '',
                            year: new Date(),
                            outPut: '',
                            iscurrent: this.props.isNow,
                            unit: "亩"
                        }
                    )
                    let nowError = this.state.plantError
                    nowError.push(
                        {
                            plantName: false,
                            area: false,
                            period: false,
                        }
                    )
                    this.setState({
                        plantList: nowList,
                        plantError: nowError
                    })
                }}>
                    <View>
                        <Text style={{ textAlign: 'center', fontSize: 18, color: '#000', lineHeight: 50 }}><Icon name='plus-circle' size={18} />添加</Text>
                    </View>
                </TouchableWithoutFeedback>
            </ScrollView>
        );
    }
}
function mapStateToProps() {
    return {

    };
}

module.exports = connect(mapStateToProps)(MinePlant);
const styles = StyleSheet.create({
    // userInfo: store.getAccount()
});
