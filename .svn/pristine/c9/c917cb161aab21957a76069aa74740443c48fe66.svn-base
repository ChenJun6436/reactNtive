// @flow

import React, { Component } from 'react';
import {
    StyleSheet,
    Text,
    View,
    ScrollView,
    TextInput,
    Alert,
    TouchableWithoutFeedback,
    TouchableOpacity
} from 'react-native';
import { List, InputItem, TextareaItem, DatePicker, Picker, ImagePicker, Button, WhiteSpace, Flex } from 'antd-mobile-rn';
import * as MineAction from 'root/src/actions/control';
import Icon from 'react-native-vector-icons/FontAwesome';
import { bold } from 'ansi-colors';
import moment from 'moment';
import DetailItem from 'root/src/screens/baseComon/DetailItem';
const { connect } = require('remx');
const Item = List.Item;
let initData = {
    plantName: '',
    area: '',
    period: '',
    year: new Date(),
    outPut: '',
    iscurrent: true,
    unit: "亩"
}
let initError = {
    plantName: false,
    area: false,
    period: false,
}
let model = null
let breedName = null
@navigatorDecorator
class ControlAdd extends Component {
    constructor(props) {
        super(props);
        this.loading = false
        this.state = {
            cropList: [],
            cropState: [''],

            peopleState: '',
            peopleList: [],

            saleDay: new Date(),

            items: [
                [
                    controlCategoryCode:'',
                    controlCategoryName:'',
                    parentCategoryCode:'',
                    children:[
                        area:'',
                        controlCategoryCode:'',
                    ]
                ]
            ],
        }
        Navigation.mergeOptions(this.props.componentId, {
            topBar: {
                title: {
                    text: this.props.id ? '编辑绿色防治' : '新增绿色防治'
                },
                rightButtons: [
                    confirmRightBtn
                ]
            }
        });
        Navigation.events().bindComponent(this);
    }
    navigationButtonPressed() {
        if (this.loading) {
            return false
        }
        let nowName = false
        let nowError = this.state.plantError
        const ret = /^(([1-9][0-9]*)|(([0]\.\d{1,2}|[1-9][0-9]*\.\d{1,2})))$/;
        if (!this.state.peopleState[0]) {
            nowName = true
            MyToast.info('请选择客户');
        }
        this.state.items.forEach((i) => {
            if (!i.cropState) {
                nowName = true
                MyToast.info('请选择销售作物');
            } else if (!i.traceCode) {
                nowName = true
                MyToast.info('请选择批次');
            } else if (!i.quantity) {
                nowName = true
                MyToast.info('请填写销售数量');
            } else if (!i.salePrice) {
                nowName = true
                MyToast.info('请填写销售单价');
            } else if (!ret.test(i.quantity)) {
                nowName = true
                MyToast.info('销售数量应大于0，且最多两位小数的数字');
            } else if (!ret.test(i.salePrice)) {
                nowName = true
                MyToast.info('销售单价应大于0，且最多两位小数的数字');
            }
        })
        if (nowName) {
            return false
        } else {
            this.loading = true
            let saleDay = moment(this.state.saleDay).format('YYYY-MM-DD');
            let items = this.state.items
            items.forEach((i) => {
                i.saleDay = saleDay
            })
            let postData = {
                customerName: this.state.peopleState[0].split('*')[1],
                customerId: this.state.peopleState[0].split('*')[0],
                remark: this.state.remark,
                saleItems: items,
            }
            if (this.props.id) {
                postData.id = this.props.id
                MineAction.EditProductSale({ input: postData }).then((data) => {
                    if (data.suc == 1) {
                        MyToast.success('编辑成功');
                        setTimeout(() => {
                            this.pop();
                            this.props.refresh && this.props.refresh()
                            this.pushPage({
                                component: {
                                    ...Global.Screens.CureList,
                                }
                            });
                        }, 2000)
                    } else {
                        this.loading = false
                        MyToast.info(data.msg)
                    }
                })
            } else {
                MineAction.AddProductSale({ input: postData }).then((data) => {
                    if (data.suc == 1) {
                        MyToast.success('新增成功');
                        setTimeout(() => {
                            this.pop();
                            this.props.refresh && this.props.refresh()
                            this.pushPage({
                                component: {
                                    ...Global.Screens.CureList,
                                }
                            });
                        }, 2000)
                    } else {
                        this.loading = false
                        MyToast.info(data.msg)
                    }
                })
            }
        }
    }
    componentWillMount() {
        //获取所有作物
        MineAction.GetPlantList().then((data) => {
            if (data.suc) {
                if (data.data.length < 1) {
                    return false
                }
                let model = data.data
                let arrInt = []
                model.forEach((i, index) => {
                    arrInt[index] = {}
                    arrInt[index].value = i.plantName
                    arrInt[index].label = i.plantName
                });
                this.setState({
                    cropList: arrInt,
                })
            } else {
                MyToast.info('作物获取失败，稍后尝试');
            }
        })
        this.GetAgriPreventionControlClass({})
        if (this.props.id) {
            MineAction.GetProductSale(this.props.id).then((data) => {
                if (data.suc) {
                    let model = data.data
                    model.saleItems.forEach((i, ind) => {
                        i.cropState = [i.cropId + '*' + i.productStockId + '*' + i.cropName, i.breedId + '*' + i.breedName]
                        i.traceState = [i.traceCode + '*' + i.stock + '*' + i.tag]
                        i.quantity = i.quantity.toString()
                        i.salePrice = i.salePrice.toString()
                        i.traceNum = (parseFloat(i.stock) + parseFloat(i.quantity)).toString()
                        i.traceNumOld = (parseFloat(i.stock) + parseFloat(i.quantity)).toString()
                        this.GetTrace(i.breedId, ind)
                    })
                    this.setState({
                        peopleState: [model.customerId + "*" + model.customerName],
                        remark: model.remark,
                        saleDay: new Date(model.saleItems[0].saleDay),
                        items: model.saleItems
                    })
                } else {
                    MyToast.info('数据获取失败，稍后尝试');
                }
            })
        }
    }
    GetAgriPreventionControlClass(postData, code) {
        //获取类型
        MineAction.GetAgriPreventionControlClass({ input: postData }).then((data) => {
            if (data.suc) {
                if (data.data.length < 1) {
                    return false
                }
                let model = data.data
                let arrInt = []
                model.forEach((i, index) => {
                    arrInt[index] = {}
                    arrInt[index].label = i.name
                    arrInt[index].value = i.code + "*" + i.name + '*' + i.parentCode
                });
                if (code == 1) {
                    this.setState({
                        peopleList: arrInt,
                    })
                } else {
                    this.setState({
                        peopleList: arrInt,
                    })
                }
            } else {
                MyToast.info('客户获取失败，稍后尝试');
            }
        })
    }
    //获取批次
    GetTrace(id, index) {
        MineAction.GetAllCropTrace(id).then((data) => {
            if (data.suc) {
                let model = data.data
                if (data.data.length < 1) {
                    return false
                }
                let arrInt = []
                model.forEach((i, index) => {
                    arrInt[index] = {}
                    arrInt[index].label = i.traceCode
                    arrInt[index].value = i.traceCode + '*' + i.quantity + '*' + i.tag
                });
                let items = this.state.items
                //获取到数据之后 判断是否已经选择了这个批次  如果选择的话就删除此批次
                if (index > 0) {
                    this.state.items.forEach((i, ind) => {
                        //作物相同时才做判断
                        if (id == i.breedId && i.traceCode) {
                            let traceCode = i.traceCode
                            arrInt.forEach((item, now) => {
                                if (item.label == traceCode) {
                                    arrInt.splice(now, 1)
                                }
                            })
                        }
                    })
                }
                items[index]['traceList'] = arrInt
                this.setState({
                    items
                })
            } else {
                MyToast.info('批次获取失败，稍后尝试');
            }
        })
    }
    changeData(name, index, data) {
        // if (!data || data.length == 0)
        //     return;
        let dataList = this.state.items
        if (name == 'cropState') {
            dataList[index]['traceList'] = []
            dataList[index]['traceCode'] = ''  //请空当前批次
            dataList[index]['tag'] = ''  //请空当前批次
            dataList[index]['traceState'] = ''  //请空当前批次
            let str = data[0].toString()
            let strTwo = data[1].toString()
            this.GetTrace(strTwo.split('*')[0], index) //获取新批次
            //分解ID 赋值
            dataList[index]['cropId'] = str.split('*')[0]
            dataList[index]['breedId'] = strTwo.split('*')[0]
            dataList[index]['productStockId'] = str.split('*')[1]
            dataList[index]['cropName'] = str.split('*')[2]
            dataList[index]['breedName'] = strTwo.split('*')[1]
        }
        if (name == 'traceState') {
            dataList[index]['traceCode'] = data[0].split('*')[0]
            dataList[index]['traceNum'] = data[0].split('*')[1]
            dataList[index]['traceNumOld'] = data[0].split('*')[1]
            dataList[index]['tag'] = data[0].split('*')[2]
            if (parseFloat(data[0].split('*')[1]) >= 0) {
                dataList[index]['quantity'] = data[0].split('*')[1]
            } else {
                dataList[index]['quantity'] = '0'
            }
        }
        dataList[index][name] = data
        if (name == 'quantity') {
            dataList[index]['traceNum'] = dataList[index]['traceNumOld']
            let getData = data
            if (!getData) {
                getData = ''
            } else if (Number.isNaN(parseFloat(getData))) {
                getData = ''
            } else if (parseFloat(getData) > 0) {
                getData = parseFloat(getData).toString()
                if (parseFloat(getData) > parseFloat(dataList[index]['traceNum'])) {
                    MyToast.info('库存不足，已为您修改至最大销售数量')
                    dataList[index]['quantity'] = dataList[index]['traceNumOld'] + ''
                }
                dataList[index]['traceNum'] = parseFloat(dataList[index]['traceNum']) - parseFloat(getData) + ''
            }
            dataList[index]['quantity'] = getData
        }
        this.setState({
            items: dataList
        })
    }
    onErrorClick = () => {
        MyToast.info('请填写正确的信息，且不能为空');
    }
    render() {
        return (
            <ScrollView style={{ backgroundColor: '#f5f5f5' }}>
                <List>
                    <Picker
                        registerNumber="作物"
                        data={this.state.cropList}
                        cols={2}
                        value={this.state.cropState}
                        onOk={(val) => {
                            this.setState({
                                cropState: val
                            })
                        }}
                        style={{ color: '#000' }}
                    >
                        <Item><Text style={{ fontSize: 17, color: '#000' }}>作物</Text></Item>
                    </Picker>
                </List>
                <View>
                    {
                        this.state.items.map((i, ind) => {
                            return (
                                <View key={ind}>
                                    <List>
                                        <View style={{ justifyContent: 'space-between', flexDirection: 'row' }}>
                                            <Text style={{ lineHeight: 50, fontSize: 18, marginLeft: 15, color: '#00BFFF', fontWeight: 'bold' }}>绿色防控（{ind + 1}）</Text>
                                            {this.state.items.length == 1 || this.props.id ? (null) : (
                                                <TouchableWithoutFeedback onPress={() => {
                                                    let nowList = this.state.items
                                                    nowList.splice(ind, 1)
                                                    this.setState({
                                                        items: nowList
                                                    })
                                                }}>
                                                    <View>
                                                        <Text style={{ textAlign: 'center', fontSize: 18, color: '#000', lineHeight: 50, marginRight: 15 }}><Icon color='red' name='trash' size={18} /></Text>
                                                    </View>
                                                </TouchableWithoutFeedback>
                                            )}
                                        </View>
                                    </List>
                                    <List>
                                        <Picker
                                            registerNumber="防控技术"
                                            data={this.state.cropList}
                                            cols={2}
                                            value={this.state.items[ind]['cropState']}
                                            onOk={(val) => {
                                                if (val != this.state.items[ind]['cropState']) {
                                                    this.changeData('cropState', ind, val)
                                                }
                                            }}
                                            style={{ color: '#000' }}
                                        >
                                            <Item><Text style={{ fontSize: 17, color: '#000' }}>防控技术</Text></Item>
                                        </Picker>
                                    </List>
                                        <List>
                                            <Picker
                                                registerNumber="防控类型"
                                                data={this.state.cropList}
                                                cols={2}
                                                value={this.state.items[ind]['cropState']}
                                                onOk={(val) => {
                                                    if (val != this.state.items[ind]['cropState']) {
                                                        this.changeData('cropState', ind, val)
                                                    }
                                                }}
                                                style={{ color: '#000' }}
                                            >
                                                <Item><Text style={{ fontSize: 17, color: '#000' }}>防控类型</Text></Item>
                                            </Picker>
                                        </List>
                                        <List>
                                            <InputItem
                                                labelNumber={12}
                                                textAlign="right"
                                                // clear
                                                onChangeText={(text) => {
                                                    this.changeData('quantity', ind, text)
                                                }}
                                                extra={'亩'}
                                                onErrorClick={this.onErrorClick}
                                                maxLength={50}
                                                placeholder="防控面积"
                                                value={this.state.items[ind].quantity}
                                                type='number'
                                            >防控面积
                                            </InputItem>
                                        </List>
                                    {
                                        this.props.id ? (null) : (
                                            <TouchableWithoutFeedback onPress={() => {
                                                let nowList = this.state.items
                                                nowList.push(
                                                    {
                                                        cropId: '',
                                                        breedId: '',
                                                        salePrice: '',
                                                        traceCode: '',
                                                        productStockId: '',
                                                        tag: '',
                                                    }
                                                )
                                                this.setState({
                                                    items: nowList,
                                                })
                                            }}>
                                                <View>
                                                    <Text style={{ textAlign: 'center', fontSize: 18, color: '#000', lineHeight: 50 }}><Icon name='plus-circle' size={18} />添加类型</Text>
                                                </View>
                                            </TouchableWithoutFeedback>
                                        )
                                    }

                                </View>
                            )
                        })
                    }
                    {
                        this.props.id ? (null) : (
                            <TouchableWithoutFeedback onPress={() => {
                                let nowList = this.state.items
                                nowList.push(
                                    {
                                        cropId: '',
                                        breedId: '',
                                        salePrice: '',
                                        traceCode: '',
                                        productStockId: '',
                                        tag: '',
                                    }
                                )
                                this.setState({
                                    items: nowList,
                                })
                            }}>
                                <View>
                                    <Text style={{ textAlign: 'center', fontSize: 18, color: '#000', lineHeight: 50 }}><Icon name='plus-circle' size={18} />添加防控技术</Text>
                                </View>
                            </TouchableWithoutFeedback>
                        )
                    }


                </View>
            </ScrollView>
        );
    }
}
function mapStateToProps() {
    return {

    };
}

module.exports = connect(mapStateToProps)(ControlAdd);
const styles = StyleSheet.create({
    // userInfo: store.getAccount()
});
